{
  "language": "Solidity",
  "sources": {
    "contracts/Comments.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ncontract Comments {\n\n    event CommentCreated (bytes32 indexed commentId, address indexed commentOwner, bytes32 indexed parentId, bytes32 contentId, bytes32 categoryId);\n    event ContentAdded (bytes32 indexed contentId, string contentUri);\n    event Voted (bytes32 indexed commentId, address indexed commentOwner, address indexed voter, uint80 reputationCommentOwner, uint80 reputationVoter, int40 commentVotes, bool up, uint8 reputationAmount);\n\n    // Data structure for each comment\n    struct comment {\n        address commentOwner;\n        bytes32 parentComment;\n        bytes32 contentId;\n        int40 votes;\n        bytes32 categoryId;\n    }\n\n    mapping (address => mapping (bytes32 => uint80)) reputationRegistry; // mapping user address to a mapping of categoryId to category name (categoryRegistry)\n    mapping (bytes32 => string) categoryRegistry; // mapping categoryId to the category name\n    mapping (bytes32 => string) contentRegistry; // mapping the contentId to the url in IPFS\n    mapping (bytes32 => comment) commentRegistry; // mapping the commentId to the comment data structure\n    mapping (address => mapping (bytes32 => bool)) voteRegistry; // mapping user address to a mapping of voteId to a boolean (like/dislike => true/false)\n\n    // Function to create a comment based on the comment data structure defined above\n    function createComment(bytes32 _parentId, string calldata _contentUri, bytes32 _categoryId) external { // content URI is where the comment data is stored in IPFS\n        address _owner = msg.sender;\n        bytes32 _contentId = keccak256(abi.encode(_contentUri)); // create contentId by hashing the _contentUri\n        bytes32 _commentId = keccak256(abi.encodePacked(_owner, _parentId, _contentId)); // commentId comprised of the hash of owner, parentId, contentId\n        contentRegistry[_contentId] = _contentUri; // save the contentUri to the contentRegistry mapping\n        commentRegistry[_commentId].commentOwner = _owner;\n        commentRegistry[_commentId].parentComment = _parentId;\n        commentRegistry[_commentId].contentId = _contentId;\n        commentRegistry[_commentId].categoryId = _categoryId;\n        // commentRegistry[_commentId].votes = 0; (Not needed bc Solidity auto initialized ints to 0)\n        emit ContentAdded(_contentId, _contentUri); // event to notify that the content was IPFS, used to fetch data on front end\n        emit CommentCreated (_commentId, _owner,_parentId,_contentId,_categoryId); // fire event that the comment was created\n    }\n\n    // Function to add a \"like\" or \"upvote\" to another user's comment\n    function voteUp(bytes32 _commentId, uint8 _reputationAdded) external { // _reputationAdded adds to the reputation of the _voter in specific category\n        address _voter = msg.sender;\n        bytes32 _category = commentRegistry[_commentId].categoryId;\n        address _contributor = commentRegistry[_commentId].commentOwner;\n        require (commentRegistry[_commentId].commentOwner != _voter, \"User cannot vote their own comments\");\n        require (voteRegistry[_voter][_commentId] == false, \"User already voted on this comment\");\n        require (validateReputationChange(_voter,_category,_reputationAdded) == true, \"This address cannot add this amount of reputation points\");\n        commentRegistry[_commentId].votes += 1; // increments the vote count of the specific comment voted on\n        reputationRegistry[_contributor][_category] += _reputationAdded; // increments to reputation of the user\n        voteRegistry[_voter][_commentId] = true; // saves voteRegistry as state and changes to true so the user can't vote twice\n        emit Voted(_commentId, _contributor, _voter, reputationRegistry[_contributor][_category], reputationRegistry[_voter][_category], commentRegistry[_commentId].votes, true, _reputationAdded); // collects all voting data to be used to update UI\n    }\n\n    // Function to add a \"dislike\" or \"downvote\" to another user's comment\n    function voteDown(bytes32 _commentId, uint8 _reputationTaken) external {\n        address _voter = msg.sender;\n        bytes32 _category = commentRegistry[_commentId].categoryId;\n        address _contributor = commentRegistry[_commentId].commentOwner;\n        require (voteRegistry[_voter][_commentId] == false, \"User already voted in this comment\");\n        require (validateReputationChange(_voter,_category,_reputationTaken)==true, \"This address cannot take this amount of reputation points\");\n        commentRegistry[_commentId].votes >= 1 ? commentRegistry[_commentId].votes -= 1 : commentRegistry[_commentId].votes = 0; // only decrement if user's votes are > 1; i.e. a comment cannot have negative votes!\n        reputationRegistry[_contributor][_category] >= _reputationTaken ? reputationRegistry[_contributor][_category] -= _reputationTaken: reputationRegistry[_contributor][_category] =0;\n        voteRegistry[_voter][_commentId] = true;\n        emit Voted(_commentId, _contributor, _voter, reputationRegistry[_contributor][_category], reputationRegistry[_voter][_category], commentRegistry[_commentId].votes, false, _reputationTaken);\n    }\n\n    // Function to validate the change in user reputation\n    function validateReputationChange(address _sender, bytes32 _categoryId, uint8 _reputationAdded) internal view returns (bool _result) {\n        uint80 _reputation = reputationRegistry[_sender][_categoryId];\n        if (_reputation < 2 ) { // if the reputation of the user voting is less than 2\n            _reputationAdded == 1 ? _result = true : _result = false; // the reputation added will only be one\n        }\n        else { // if reputation is greater than 2\n            2**_reputationAdded <= _reputation ? _result = true: _result = false; // we logarithmically determine the reputation added\n        }\n    }\n\n    /* GET FUNCTIONS */\n\n    function getContent(bytes32 _contentId) public view returns (string memory) {\n        return contentRegistry[_contentId];\n    }\n    \n    function getCategory(bytes32 _categoryId) public view returns(string memory) {   \n        return categoryRegistry[_categoryId];\n    }\n\n    function getReputation(address _address, bytes32 _categoryID) public view returns(uint80) {   \n        return reputationRegistry[_address][_categoryID];\n    }\n\n    function getComment(bytes32 _commentId) public view returns(address, bytes32, bytes32, int72, bytes32) {   \n        return (\n            commentRegistry[_commentId].commentOwner,\n            commentRegistry[_commentId].parentComment,\n            commentRegistry[_commentId].contentId,\n            commentRegistry[_commentId].votes,\n            commentRegistry[_commentId].categoryId);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}